on:
  push:
    branches:
      - main
    paths:
      - 'Dashboards/**'

  workflow_dispatch:

jobs:
  deploy-dashboards:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy Modified or All Dashboards via Manifest
        env:
          ALL_SECRETS: ${{ toJSON(secrets) }}
        run: |
          # Detect modified files if triggered by a push
          if [ "${{ github.event_name }}" == "push" ]; then
            MODIFIED_FILES=$(git diff --name-only HEAD~1 HEAD | grep 'Dashboards/.*\.json$')
            if [ -z "$MODIFIED_FILES" ]; then
              echo "No dashboard JSON files were modified in the push. Exiting."
              exit 0
            fi
            echo "Modified dashboards in push: $MODIFIED_FILES"
          else
            echo "Manual trigger detected. All files in the manifest will be deployed."
          fi

          echo "------------------------------------------------------"

          # Loop through each manifest entry
          jq -r -c '.[]' Dashboards/manifest.json | while read -r entry; do
            FILE_PATH=$(echo "$entry" | jq -r '.filePath')

            # Skip unmodified files in push event
            if [ "${{ github.event_name }}" == "push" ] && ! echo "$MODIFIED_FILES" | grep -q "^$FILE_PATH$"; then
              continue
            fi

            ACCOUNT_ID=$(echo "$entry" | jq -r '.accountId')
            API_KEY_SECRET_NAME=$(echo "$entry" | jq -r '.apiKeySecretName')
            API_KEY=$(echo "$ALL_SECRETS" | jq -r ".\"$API_KEY_SECRET_NAME\"")

            if [ -z "$API_KEY" ] || [ "$API_KEY" == "null" ]; then
              echo "::error::Secret '$API_KEY_SECRET_NAME' could not be found."
              exit 1
            fi

            if [ ! -f "$FILE_PATH" ]; then
              echo "::error::Dashboard file '$FILE_PATH' not found."
              exit 1
            fi

            echo "Deploying: $FILE_PATH to Account ID: $ACCOUNT_ID"

            # Read and validate JSON
            DASHBOARD_CONTENT=$(cat "$FILE_PATH")
            echo "$DASHBOARD_CONTENT" | jq . > /dev/null
            if [ $? -ne 0 ]; then
              echo "::error::Invalid JSON in $FILE_PATH"
              exit 1
            fi

            # Extract the dashboard name (or another unique identifier)
            DASHBOARD_NAME=$(echo "$entry" | jq -r '.name')

            # Query New Relic to get the existing dashboard GUID based on the name
            QUERY=$(jq -n \
              --arg accountId "$ACCOUNT_ID" \
              --arg dashboardName "$DASHBOARD_NAME" \
              '{
                query: "query($accountId: Int!, $dashboardName: String!) { actor { account(id: $accountId) { dashboards(search: $dashboardName) { dashboards { guid name } } } } }",
                variables: { accountId: ($accountId | tonumber), dashboardName: $dashboardName }
              }')

            # Execute the GraphQL query
            EXISTING_GUID=$(curl -s -X POST https://api.newrelic.com/graphql \
              -H "Content-Type: application/json" \
              -H "API-Key: $API_KEY" \
              -d "$QUERY" | jq -r '.data.actor.account.dashboards.dashboards[0].guid')

            if [ "$EXISTING_GUID" != "null" ]; then
              echo "Found existing dashboard with GUID: $EXISTING_GUID"
            else
              echo "No existing dashboard found, creating a new one"
              EXISTING_GUID=""
            fi

            # Build GraphQL mutation for update or create
            GRAPHQL_MUTATION=$(jq -n \
               --arg acctId "$ACCOUNT_ID" \
               --arg dashboard "$DASHBOARD_CONTENT" \
               --arg guid "$EXISTING_GUID" \
              '{
               query: "mutation($dashboardJson: DashboardInput!, $accountId: Int!, $guid: String) { dashboardUpdate(accountId: $accountId, dashboard: $dashboardJson, guid: $guid) { entityResult { guid } } }",
               variables: {
                 accountId: ($acctId | tonumber),
                 dashboardJson: ($dashboard | fromjson),
                 guid: $guid
                 }
                }')

            # Execute the API request
            RESPONSE=$(curl -s -X POST https://api.newrelic.com/graphql \
              -H "Content-Type: application/json" \
              -H "API-Key: ${API_KEY}" \
              -d "${GRAPHQL_MUTATION}")

            # Check for errors in the response
            if echo "$RESPONSE" | grep -q "errors"; then
              echo "::error::Deployment failed for $FILE_PATH"
              echo "$RESPONSE"
              exit 1
            else
              echo "âœ… Successfully deployed $FILE_PATH to Account $ACCOUNT_ID"
              echo "Response: $RESPONSE"
            fi

            echo "------------------------------------------------------"
          done
