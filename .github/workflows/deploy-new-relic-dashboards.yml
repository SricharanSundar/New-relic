on:
  push:
    branches:
      - main
    paths:
      - 'Dashboards/**'

  workflow_dispatch:

jobs:
  deploy-dashboards:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy Modified or All Dashboards via Manifest
        env:
          ALL_SECRETS: ${{ toJSON(secrets) }}
        run: |
          # Detect modified files if triggered by a push
          if [ "${{ github.event_name }}" == "push" ]; then
            MODIFIED_FILES=$(git diff --name-only HEAD~1 HEAD | grep 'Dashboards/.*\.json$')
            if [ -z "$MODIFIED_FILES" ]; then
              echo "No dashboard JSON files were modified in the push. Exiting."
              exit 0
            fi
            echo "Modified dashboards in push: $MODIFIED_FILES"
          else
            echo "Manual trigger detected. All files in the manifest will be deployed."
          fi

          echo "------------------------------------------------------"

          # Loop through each manifest entry
          jq -r -c '.[]' Dashboards/manifest.json | while read -r entry; do
            FILE_PATH=$(echo "$entry" | jq -r '.filePath')

            # Skip unmodified files in push event
            if [ "${{ github.event_name }}" == "push" ] && ! echo "$MODIFIED_FILES" | grep -q "^$FILE_PATH$"; then
              continue
            fi

            ACCOUNT_ID=$(echo "$entry" | jq -r '.accountId')
            API_KEY_SECRET_NAME=$(echo "$entry" | jq -r '.apiKeySecretName')
            API_KEY=$(echo "$ALL_SECRETS" | jq -r ".\"$API_KEY_SECRET_NAME\"")
            GUID=$(echo "$entry" | jq -r '.guid')  # Get the GUID from the manifest

            if [ -z "$API_KEY" ] || [ "$API_KEY" == "null" ]; then
              echo "::error::Secret '$API_KEY_SECRET_NAME' could not be found."
              exit 1
            fi

            if [ ! -f "$FILE_PATH" ]; then
              echo "::error::Dashboard file '$FILE_PATH' not found."
              exit 1
            fi

            echo "Deploying: $FILE_PATH to Account ID: $ACCOUNT_ID"

            # Read and validate JSON
            DASHBOARD_CONTENT=$(cat "$FILE_PATH")
            echo "$DASHBOARD_CONTENT" | jq . > /dev/null
            if [ $? -ne 0 ]; then
              echo "::error::Invalid JSON in $FILE_PATH"
              exit 1
            fi

            # Attempt to update the dashboard with the provided GUID
            if [ -n "$GUID" ]; then
              echo "Attempting to update existing dashboard with GUID: $GUID"
              
              # Update the dashboard (no accountId needed for update)
              GRAPHQL_MUTATION=$(jq -n \
                 --arg dashboard "$DASHBOARD_CONTENT" \
                 --arg guid "$GUID" \
                '{
                 query: "mutation($dashboardJson: DashboardInput!, $guid: EntityGuid!) { dashboardUpdate(guid: $guid, dashboard: $dashboardJson) { entityResult { guid } } }",
                 variables: {
                   dashboardJson: ($dashboard | fromjson),
                   guid: $guid
                   }
                }')
              # Execute the API request
              RESPONSE=$(curl -s -X POST https://api.newrelic.com/graphql \
                -H "Content-Type: application/json" \
                -H "API-Key: ${API_KEY}" \
                -d "${GRAPHQL_MUTATION}")

              # Log response for debugging
              echo "API Response: $RESPONSE"
              
              # Check if the dashboard is not found
              if echo "$RESPONSE" | grep -q "DASHBOARD_NOT_FOUND"; then
                echo "::warning::Dashboard with GUID: $GUID not found. Creating a new dashboard instead."

                #
