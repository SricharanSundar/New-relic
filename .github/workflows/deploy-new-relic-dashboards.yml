name: Deploy New Relic Dashboards via Manifest

on:
  push:
    branches:
      - main
    paths:
      - 'Dashboards/**'

  workflow_dispatch:

jobs:
  deploy-dashboards:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up jq
        run: |
          sudo apt-get install jq

      - name: Deploy or Update Dashboards
        env:
          ALL_SECRETS: ${{ toJSON(secrets) }}
        run: |
          # Detect modified files if triggered by a push
          if [ "${{ github.event_name }}" == "push" ]; then
            MODIFIED_FILES=$(git diff --name-only HEAD~1 HEAD | grep 'Dashboards/.*\.json$')
            if [ -z "$MODIFIED_FILES" ]; then
              echo "No dashboard JSON files were modified in the push. Exiting."
              exit 0
            fi
            echo "Modified dashboards in push: $MODIFIED_FILES"
          else
            echo "Manual trigger detected. All files in the manifest will be deployed."
          fi

          echo "------------------------------------------------------"

          # Loop through each manifest entry
          jq -r -c '.[]' Dashboards/manifest.json | while read -r entry; do
            FILE_PATH=$(echo "$entry" | jq -r '.filePath')
            DASHBOARD_GUID=$(echo "$entry" | jq -r '.guid')  # Ensure guid is extracted correctly
            ACCOUNT_ID=$(echo "$entry" | jq -r '.accountId')
            API_KEY_SECRET_NAME=$(echo "$entry" | jq -r '.apiKeySecretName')
            API_KEY=$(echo "$ALL_SECRETS" | jq -r ".\"$API_KEY_SECRET_NAME\"")

            # Check if the API key is available
            if [ -z "$API_KEY" ] || [ "$API_KEY" == "null" ]; then
              echo "::error::Secret '$API_KEY_SECRET_NAME' could not be found."
              exit 1
            fi

            # Check if the file exists
            if [ ! -f "$FILE_PATH" ]; then
              echo "::error::Dashboard file '$FILE_PATH' not found."
              exit 1
            fi

            echo "Deploying: $FILE_PATH to Account ID: $ACCOUNT_ID"

            # Read the content of the dashboard JSON file
            DASHBOARD_CONTENT=$(cat "$FILE_PATH")

            # Ensure the JSON is valid
            echo "$DASHBOARD_CONTENT" | jq . > /dev/null
            if [ $? -ne 0 ]; then
              echo "::error::Invalid JSON in $FILE_PATH"
              exit 1
            fi

            # Build the GraphQL mutation to update the dashboard
            GRAPHQL_MUTATION=$(jq -n \
               --arg acctId "$ACCOUNT_ID" \
               --arg guid "$DASHBOARD_GUID" \
               --arg dashboard "$DASHBOARD_CONTENT" \
              '{
               query: "mutation($dashboardGuid: String!, $dashboardJson: DashboardInput!, $accountId: Int!) { 
                         dashboardUpdate(accountId: $accountId, guid: $dashboardGuid, dashboard: $dashboardJson) { 
                           entityResult { guid } 
                         } 
                       }",
               variables: {
                 dashboardGuid: $guid,
                 accountId: ($acctId | tonumber),
                 dashboardJson: ($dashboard | fromjson)
                 }
                }')

            # Send the GraphQL request to update the dashboard
            RESPONSE=$(curl -s -X POST https://api.newrelic.com/graphql \
              -H "Content-Type: application/json" \
              -H "API-Key: ${API_KEY}" \
              -d "${GRAPHQL_MUTATION}")

            # Check if the response contains errors or a new guid
            if echo "$RESPONSE" | grep -q "errors"; then
              echo "::error::Deployment failed for $FILE_PATH"
              echo "$RESPONSE"
              exit 1
            else
              # Successful update
              echo "âœ… Successfully updated the dashboard"
              echo "Response: $RESPONSE"
            fi

            echo "------------------------------------------------------"
          done
